package templates

// EchoEntityTmpl : is tmpl to create app
var EchoEntityTmpl = `// Code generated by Mestri; DO NOT EDIT.
// This file was generated by Mestri robots at
// {{ .Timestamp }}
package {{ .Model }}


import (
	"context"
	"database/sql"
	"encoding/json"
	
)

// Entity : Entity is the model
type Entity struct {
	{{ range $key, $value := .Entity }}
   		{{ $value.ModelName  }} {{ $value.KeyType }} "json:'{{$key}}'"
	{{ end }}
}


// Repository represent the {{ .Model }} repository contract
type Repository interface {
	Index(ctx context.Context, cursor string, num int64) (res []Entity, nextCursor string, err error)
	Get(ctx context.Context, id {{.IdType}}) (Entity, error)
	Update(ctx context.Context, en *Entity, id {{.IdType}}) error
	Create(ctx context.Context, en *Entity) error
	Delete(ctx context.Context, id {{.IdType}}) error
}


// Usecase represent the {{ .Model }} usecases
type Usecase interface {
	Index(ctx context.Context, cursor string, num int64) ([]Entity, string, error)
	Get(ctx context.Context, id {{.IdType}}) (Entity, error)	
	Update(ctx context.Context, en *Entity, id {{.IdType}}) error
	Create(context.Context, *Entity) error
	Delete(ctx context.Context, id {{.IdType}}) error
}

//NullString is a wrapper around sql.NullString
type NullString struct {
	sql.NullString
}

//MarshalJSON method is called by json.Marshal,
//whenever it is of type NullString
func (x *NullString) MarshalJSON() ([]byte, error) {
    if !x.Valid {
        return []byte("null"), nil
    }
    return json.Marshal(x.String)
}


//NullString is a wrapper around sql.NullString
type NullInt64 struct {
	sql.NullInt64
}

//MarshalJSON method is called by json.Marshal,
//whenever it is of type NullInt64
func (x *NullInt64) MarshalJSON() ([]byte, error) {
	if !x.Valid {
        return []byte("null"), nil
    }
    return json.Marshal(x.Int64)
}


//NullString is a wrapper around sql.NullString
type NullBool struct {
	sql.NullBool
}

//MarshalJSON method is called by json.Marshal,
//whenever it is of type NullBool
func (x *NullBool) MarshalJSON() ([]byte, error) {
	if !x.Valid {
        return []byte("null"), nil
    }
    return json.Marshal(x.Bool)
}

`
